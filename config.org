#+EXPORT_FILE_NAME: readme
* Preamble
This is my private DOOM emacs configuration. It is tangled from ~config.org~ to ~config.el~
and is exported to ~readme.org~ with =, e O o= to render in the githup repo.

Username and e-mail:
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Luca Cambiaghi"
      user-mail-address "luca.cambiaghi@me.com")
#+END_SRC
* Keybindings
Let's have ~general~ auto-unbind keys:
#+BEGIN_SRC emacs-lisp
(general-auto-unbind-keys)
#+END_SRC

We then remap some of the bindings (inspired by [[https://github.com/jsmestad/dfiles/blob/master/.doom.d/%2Bbindings.el#L496-L854][bindings.el]]).
#+BEGIN_SRC emacs-lisp
(map! :leader
      :desc "M-x"                   :n "SPC" #'counsel-M-x
      :desc "ivy resume" :n ":" #'ivy-resume
      :desc "Async shell command"   :n "!"   #'async-shell-command
      :desc "Toggle eshell"         :n "'"   #'+eshell/toggle
      :desc "Open dir in iTerm" :n "oi" #'+macos/open-in-iterm

      (:desc "windows" :prefix "w"
        :desc "popup raise" :n "p" #'+popup/raise)

      (:desc "project" :prefix "p"
        :desc "Eshell"               :n "'" #'projectile-run-eshell
        :desc "Terminal" :n "t" #'projectile-run-vterm ))

#+END_SRC

* User Interface
** Turn off line numbers
#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type nil)
#+END_SRC
** Font and font size:
#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "Menlo" :size 14))
#+END_SRC
** Transparency
#+BEGIN_SRC emacs-lisp
;transparent adjustment
(set-frame-parameter (selected-frame)'alpha '(94 . 94))
(add-to-list 'default-frame-alist'(alpha . (94 . 94)))
#+END_SRC
** Theme:
#+BEGIN_SRC emacs-lisp
(setq doom-theme 'doom-vibrant)
#+END_SRC
** Centaur-tabs
#+BEGIN_SRC emacs-lisp
(after! centaur-tabs
  (setq centaur-tabs-set-modified-marker t
        centaur-tabs-modified-marker "M"
        centaur-tabs-cycle-scope 'tabs
        centaur-tabs-set-close-button nil)
  (centaur-tabs-group-by-projectile-project)
  (add-hook 'dired-mode-hook 'centaur-tabs-local-mode))
#+END_SRC
** Winum
note: insteadf of using =SPC 0=, use =SPC w h= to access its window. In general,
use those keys!
#+BEGIN_SRC emacs-lisp
(after! winum
  ;; (defun winum-assign-0-to-treemacs ()
  ;;   (when (string-match-p (buffer-name) "*Treemacs*") 10))

  ;; (add-to-list 'winum-assign-functions #'winum-assign-0-to-treemacs)

    (map! (:when (featurep! :ui window-select)
            :leader
            :n "1" #'winum-select-window-1
            :n "2" #'winum-select-window-2
            :n "3" #'winum-select-window-3
        )))
#+END_SRC
** Pretty code
#+BEGIN_SRC emacs-lisp
(setq +pretty-code-enabled-modes '(org-mode))
#+END_SRC
** modeline
*** Hide undesired info
#+BEGIN_SRC emacs-lisp
(after! doom-modeline
  (setq doom-modeline-buffer-encoding nil)
  (setq doom-modeline-env-enable-python nil))
;; (setq doom-modeline-env-python-executable (executable-find "python"))
#+END_SRC
*** TODO Flashing modelinennn
#+BEGIN_SRC emacs-lisp
;; (setq inhibit-compacting-font-caches t)
#+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp
(setq magit-repository-directories '(("~/git" . 2))
      magit-save-repository-buffers nil
      ;; Don't restore the wconf after quitting magit
      magit-inhibit-save-previous-winconf t)
#+END_SRC
* Company
#+BEGIN_SRC emacs-lisp
(after! company
  (setq company-idle-delay 0
        company-minimum-prefix-length 2
        company-quickhelp-delay 0.4)
  (set-company-backend! 'org-mode
    '(company-files
      company-capf)))
#+END_SRC
* Org
** Directories:
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/git/org/"
      org-image-actual-width nil
      +org-export-directory "~/git/org/export/"
      org-default-notes-file "~/git/org/inbox.org"
      org-id-locations-file "~/git/org/.orgids"
      )
#+END_SRC

** Export
Load ~ox-ravel~:
#+BEGIN_SRC emacs-lisp
(load! "modules/ox-ravel")
#+END_SRC
This allows to export from ~.org~ to ~.Rmd~
** Capture
#+BEGIN_SRC emacs-lisp
(after! org

  (setq org-capture-templates
                  '(("d" "Diary")
                    ("u" "URL")))

  (add-to-list 'org-capture-templates
             '("dn" "New Diary Entry" entry(file+olp+datetree"~/git/org/personal/diary.org" "Daily Logs")
"* %^{thought for the day}
:PROPERTIES:
:CATEGORY: %^{category}
:SUBJECT:  %^{subject}
:MOOD:     %^{mood}
:END:
:RESOURCES:
:END:

\*What was one good thing you learned today?*:
- %^{whatilearnedtoday}

\*List one thing you could have done better*:
- %^{onethingdobetter}

\*Describe in your own words how your day was*:
- %?"))

  (add-to-list 'org-capture-templates
      '("un" "New URL Entry" entry(file+function "~/git/org/personal/dailies.org" org-reverse-datetree-goto-date-in-file)
            "* [[%^{URL}][%^{Description}]] %^g %?")))
#+END_SRC

** Prettify
#+BEGIN_SRC emacs-lisp
(setq org-bullets-bullet-list '("✖" "✚")
      org-ellipsis "▼")
#+END_SRC
** Org agenda popup
#+BEGIN_SRC emacs-lisp
(set-popup-rule! "*org agenda*" :side 'right :size .40 :select t :vslot 2 :ttl 3)
#+END_SRC
** emacs-jupyter
*** Default header arguments:
#+BEGIN_SRC emacs-lisp
(after! evil-org
  (setq org-babel-default-header-args:jupyter-python '((:async . "yes")
                                                       (:pandoc t)
                                                       (:kernel . "python3")))
  (setq org-babel-default-header-args:jupyter-R '((:pandoc t)
                                                  (:kernel . "ir"))))
#+END_SRC
*** Key bindings:
#+BEGIN_SRC emacs-lisp
;; (:when (featurep! :lang +jupyter)
(map! :after evil-org
 :map evil-org-mode-map
 :n "gR" #'jupyter-org-execute-subtree
 :localleader
 :desc "Hydra" :n "," #'jupyter-org-hydra/body
 :desc "Inspect at point" :n "?" #'jupyter-inspect-at-point
 :desc "Execute and step" :n "RET" #'jupyter-org-execute-and-next-block
 :desc "Delete code block" :n "x" #'jupyter-org-kill-block-and-results
 :desc "New code block above" :n "+" #'jupyter-org-insert-src-block
 :desc "New code block below" :n "=" (λ! () (interactive) (jupyter-org-insert-src-block t nil))
 :desc "Merge code blocks" :n "m" #'jupyter-org-merge-blocks
 :desc "Split code block" :n "-" #'jupyter-org-split-src-block
 :desc "Fold results" :n "z" #'org-babel-hide-result-toggle
 )
#+END_SRC
*** Popups: pager and org src
#+BEGIN_SRC emacs-lisp
(set-popup-rule! "*jupyter-pager*" :side 'right :size .40 :select t :vslot 2 :ttl 3)
;; (after! jupyter (set-popup-rule! "^\\*Org Src*" :side 'right :size .40 :select t :vslot 2 :ttl 3))
(set-popup-rule! "^\\*Org Src*" :ignore t)
#+END_SRC
*** TODO Bigger inline images
#+BEGIN_SRC emacs-lisp
;; (setq org-image-actual-width t)
#+END_SRC
** ox-ipynb
#+BEGIN_SRC emacs-lisp
(require 'ox-ipynb)
#+END_SRC
* Python
** REPL
*** virtualenv executable
#+BEGIN_SRC emacs-lisp
(defadvice! +python-poetry-open-repl-a (orig-fn &rest args)
  "Use the Python binary from the current virtual environment."
  :around #'+python/open-repl
  (if (getenv "VIRTUAL_ENV")
      (let ((python-shell-interpreter (executable-find "ipython")))
        (apply orig-fn args))
    (apply orig-fn args)))
#+END_SRC
*** Set REPL handler
On a scratch buffer, first run ~jupyter-associate-buffer~.
Then, hitting ~SPC o r~ allows use to hit the REPL buffer with the lines/regions
of code we send with ~g r~.
#+BEGIN_SRC emacs-lisp
(add-hook! python-mode
  ;; (set-repl-handler! 'python-mode #'jupyter-repl-pop-to-buffer)
  (set-repl-handler! 'python-mode #'+python/open-ipython-repl)
  )
#+END_SRC
*** Silence warnings when opening REPL
#+BEGIN_SRC emacs-lisp
(setq python-shell-prompt-detect-failure-warning nil)
#+END_SRC
*** Ignore popup rule
#+BEGIN_SRC emacs-lisp
(set-popup-rule! "^\\*Python*" :ignore t)
#+END_SRC
*** Disable native completion
#+BEGIN_SRC emacs-lisp
(after! python
  (setq python-shell-completion-native-enable nil))
#+END_SRC

** LSP
*** Don't guess project root
#+BEGIN_SRC emacs-lisp
(after! lsp-mode
  (setq lsp-auto-guess-root nil))
#+END_SRC
*** LSP idle delay
This variable determines how often lsp-mode will refresh the highlights, lenses, links, etc while you type.
#+BEGIN_SRC emacs-lisp
(after! lsp-mode
  (setq lsp-idle-delay 0.500))
#+END_SRC
*** Prefer company-capf over company-lsp
#+BEGIN_SRC emacs-lisp
;; (remove-hook 'lsp-mode-hook #'+lsp-init-company-h)

(setq +lsp-company-backend 'company-capf)

(after! lsp-mode
  (setq lsp-prefer-capf t))
#+END_SRC
*** lsp-help popup
Lookup documentation with ~SPC c k~
#+BEGIN_SRC emacs-lisp
(set-popup-rule! "^\\*lsp-help" :side 'right :size .50 :select t :vslot 1)
#+END_SRC
*** Missing imports
In python mode, use ~, i i~ to add missing imports
#+BEGIN_SRC emacs-lisp
(after! pyimport
  (setq pyimport-pyflakes-path "~/git/experiments/.venv/bin/pyflakes"))
#+END_SRC
*** lsp-ui
#+BEGIN_SRC emacs-lisp
(after! lsp-ui
  (setq lsp-eldoc-enable-hover nil ; Disable eldoc displays in minibuffer
        lsp-ui-imenu-colors `(,(face-foreground 'font-lock-keyword-face)
                              ,(face-foreground 'font-lock-string-face)
                              ,(face-foreground 'font-lock-constant-face)
                              ,(face-foreground 'font-lock-variable-name-face))

        lsp-enable-on-type-formatting nil
        lsp-enable-symbol-highlighting nil
        lsp-enable-file-watchers nil))
#+END_SRC
** Pytest
#+BEGIN_SRC emacs-lisp
(after! python-pytest
  (setq python-pytest-arguments '("--color" "--failed-first"))
  (set-popup-rule! "^\\*pytest*" :side 'right :size .50))
#+END_SRC
** dap-mode
*** dap-ui windows
#+BEGIN_SRC emacs-lisp
(after! dap-mode
  (setq dap-auto-show-output nil)
  ;; (set-popup-rule! "*dap-ui-locals*" :side 'right :size .50 :vslot 1)
  (set-popup-rule! "*dap-debug-.*" :side 'bottom :size .20 :slot 1)
  (set-popup-rule! "*dap-ui-repl*" :side 'right :size .40 :select t :slot 1)

  ;; (defun my/window-visible (b-name)
  ;;   "Return whether B-NAME is visible."
  ;;   (-> (-compose 'buffer-name 'window-buffer)
  ;;       (-map (window-list))
  ;;       (-contains? b-name)))

  ;; (defun my/show-debug-windows (session)
  ;;   "Show debug windows."
  ;;   (let ((lsp--cur-workspace (dap--debug-session-workspace session)))
  ;;       (save-excursion
  ;;       (unless (my/window-visible dap-ui--locals-buffer)
  ;;           (dap-ui-locals)))))

  ;;   (add-hook 'dap-stopped-hook 'my/show-debug-windows)

  ;;   (defun my/hide-debug-windows (session)
  ;;   "Hide debug windows when all debug sessions are dead."
  ;;   (unless (-filter 'dap--session-running (dap--get-sessions))
  ;;       (and (get-buffer dap-ui--locals-buffer)
  ;;           (kill-buffer dap-ui--locals-buffer))))

  ;;   (add-hook 'dap-terminated-hook 'my/hide-debug-windows)
  )
#+END_SRC

*** Bindings
#+BEGIN_SRC emacs-lisp
(map! :after dap-python
    :map python-mode-map
    :localleader
    (:desc "debug" :prefix "d"
      :desc "Hydra" :n "h" #'dap-hydra
      :desc "Run debug configuration" :n "d" #'dap-debug
      :desc "dap-ui REPL" :n "r" #'dap-ui-repl
      :desc "Edit debug template" :n "t" #'dap-debug-edit-template
      :desc "Run last debug configuration" :n "l" #'dap-debug-last
      :desc "Toggle breakpoint" :n "b" #'dap-breakpoint-toggle
      :desc "dap continue" :n "c" #'dap-continue
      :desc "dap next" :n "n" #'dap-next
      :desc "dap step in" :n "s" #'dap-step-in
      :desc "Disconnect" :n "q" #'dap-disconnect ))
#+END_SRC
*** Debug templates:
#+BEGIN_SRC emacs-lisp
(after! dap-python
    (dap-register-debug-template "dap-debug-script"
                            (list :type "python"
                                :args "-i"
                                :cwd (lsp-workspace-root)
                                :program nil ; (expand-file-name "~/git/blabla")
                                :environment-variables '(("PYTHONPATH" . "src"))
                                :request "launch"
                                :name "dap-debug-script"))

    (dap-register-debug-template "dap-debug-test"
                            (list :type "python"
                                :cwd (lsp-workspace-root)
                                :environment-variables '(("PYTHONPATH" . "src"))
                                :module "pytest"
                                :request "launch"
                                :name "dap-debug-test")))
#+END_SRC
*** virtualenv executable
#+BEGIN_SRC emacs-lisp
(defadvice! +dap-python-poetry-executable-find-a (orig-fn &rest args)
  "Use the Python binary from the current virtual environment."
  :around #'dap-python--pyenv-executable-find
  (if (getenv "VIRTUAL_ENV")
      (executable-find (car args))
    (apply orig-fn args)))
;; (after! dap-python
;;   (defun dap-python--pyenv-executable-find (command)
;;     (concat (getenv "VIRTUAL_ENV") "/bin/python")))
#+END_SRC
*** completion
#+BEGIN_SRC emacs-lisp
(after! dap-mode
  (set-company-backend! 'dap-ui-repl-mode 'company-dap-ui-repl)

  (add-hook 'dap-ui-repl-mode-hook
            (lambda ()
              (setq-local company-minimum-prefix-length 1))))
#+END_SRC
*** tooltip mode
#+BEGIN_SRC emacs-lisp
(after! dap-mode
  (dap-tooltip-mode 1)
  (tooltip-mode 1))
#+END_SRC

** emacs-ipython-notebook
*** Don't ignore ~ein~ buffers
#+BEGIN_SRC emacs-lisp
(after! ein
  (set-popup-rule! "^\\*ein" :ignore t))
#+END_SRC
*** Bindings
Bindings, inspired by[[https://github.com/millejoh/emacs-ipython-notebook/wiki/Spacemacs-Evil-Bindings][ this]].
#+BEGIN_SRC emacs-lisp
(map! (:when (featurep! :tools ein)
        (:map ein:notebook-mode-map
          :nmvo doom-localleader-key nil ;; remove binding to local-leader

          ;; :desc "Execute" :ni "S-RET" #'ein:worksheet-execute-cell

          :localleader
          :desc "Show Hydra" :n "?" #'+ein/hydra/body
          :desc "Execute and step" :n "RET" #'ein:worksheet-execute-cell-and-goto-next
          :desc "Yank cell" :n "y" #'ein:worksheet-copy-cell
          :desc "Paste cell" :n "p" #'ein:worksheet-yank-cell
          :desc "Delete cell" :n "d" #'ein:worksheet-kill-cell
          :desc "Insert cell below" :n "o" #'ein:worksheet-insert-cell-below
          :desc "Insert cell above" :n "O" #'ein:worksheet-insert-cell-above
          :desc "Next cell" :n "j" #'ein:worksheet-goto-next-input
          :desc "Previous cell" :n "k" #'ein:worksheet-goto-prev-input
          :desc "Save notebook" :n "fs" #'ein:notebook-save-notebook-command
      )))
#+END_SRC
** Dash docsets
When ~SPC c k~ fails, try searching in the docsets with ~SPC s k~.
Install docsets with ~dash-docs-install-docset~.
#+BEGIN_SRC emacs-lisp
(set-popup-rule! "*eww*" :side 'right :size .50 :select t :vslot 2 :ttl 3)

(after! dash-docs
  ;; (setq dash-docs-docsets-path "/Users/luca/Library/Application Support/Dash/DocSets")
  ;; (setq counsel-dash-docsets-path "/Users/luca/Library/Application Support/Dash/DocSets")
  ;; (expand-file-name "~/Library/Application Support/Dash/DocSets")
  ;; (set-docsets! 'python-mode "NumPy" "Pandas" "scikit-learn"))
  (setq counsel-dash-docsets '("Pandas" "scikit-learn"))
  (setq dash-docs-docsets '("Pandas" "scikit-learn")))
#+END_SRC
** Compilation popup
#+BEGIN_SRC emacs-lisp
(set-popup-rule! "*compilation*" :side 'right :size .50 :select t :vslot 2 :ttl 3)
#+END_SRC
* R
** ESS console popup
Disable popup for ESS:
#+BEGIN_SRC emacs-lisp
(set-popup-rule! "^\\*R:" :ignore t)
#+END_SRC
* Shell
** Async Shell command
#+BEGIN_SRC emacs-lisp
(defun shell-command-print-separator ()
  (overlay-put (make-overlay (point-max) (point-max))
               'before-string
               (propertize "!" 'display
                           (list 'left-fringe
                                 'right-triangle))))

(advice-add 'shell-command--save-pos-or-erase :after 'shell-command-print-separator)
#+END_SRC
** Async command and vterm popups
#+BEGIN_SRC emacs-lisp
  (set-popup-rule! "*Async Shell Command*" :side 'bottom :size .40 :ttl 3)
  (set-popup-rule! "vterm" :side 'right :size .40 :ttl 3)
#+END_SRC
